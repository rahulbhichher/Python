So, you’ve got your variables and named it. You’re now free to use them to perform corresponding operations, just as you do with numbers and strings. 

Like this:

```python
x = 7
print(x)

print(x + 3)
print(x)
```

Note: You can see that the variable stores its value throughout the program.

---

```python
spam = "eggs"
print(spam * 3)
#output: eggseggseggs
```

---

Need to change the value of a variable? EASY. Variables can be redesigned as many times as you want. Like this:

```python
print = 123.456
print(x)
#output: 123.456

x = "This is a string"
print(x + "!")
#output: This is a string!
```

Note: But beware! overwriting the same variable with different data types is generally not a good practice. To avoid mistakes, try to avoid doing it.

---

A program can include multiple variables, which can be used together to produce a result.

```python
a = 8
name = "Sonia"

print(a * name)
```

---

You can use the del statement to remove variables.

```python
x = 42
del x
```

---

Deleted variables can be reassigned.

```python
X = 2
del x
x = 8
print(x)
```

## Task1:

The provided code stores the value 7 in a variable, and outputs it.

Change the code to output the value of the variable raised to the power of 3.

```python
num = 7
print(num ** 3)

```

## Task2:

### Contact Management System

You’re making a contact management system. The given program declares two variables, name and age.

Complete the code to output “name is age years old, where name and age are the declared variables.

You can add together strings using + operators. And don’t forget about spaces.

```python
name = "James"
age = "42"
print(name + " " + "is" + " " + age + " " + "years old")
```
